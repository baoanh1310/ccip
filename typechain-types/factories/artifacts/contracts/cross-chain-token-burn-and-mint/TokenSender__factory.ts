/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TokenSender,
  TokenSenderInterface,
} from "../../../../artifacts/contracts/cross-chain-token-burn-and-mint/TokenSender";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address",
        name: "link",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "FailedToWithdrawEth",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "messageId",
        type: "bytes32",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "enum TokenSender.PayFeesIn",
        name: "payFeesIn",
        type: "uint8",
      },
    ],
    name: "send",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "beneficiary",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "withdrawToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60e06040523480156200001157600080fd5b5060405162001b4338038062001b4383398181016040528101906200003791906200041c565b338060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620000ac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a390620004d9565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620001335762000132816200028360201b60201c565b5b5050508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505060a05173ffffffffffffffffffffffffffffffffffffffff1663095ea7b36080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016200023392919062000527565b6020604051808303816000875af115801562000253573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000279919062000591565b5050505062000635565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620002f4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002eb9062000613565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003e482620003b7565b9050919050565b620003f681620003d7565b81146200040257600080fd5b50565b6000815190506200041681620003eb565b92915050565b600080600060608486031215620004385762000437620003b2565b5b6000620004488682870162000405565b93505060206200045b8682870162000405565b92505060406200046e8682870162000405565b9150509250925092565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b6000620004c160188362000478565b9150620004ce8262000489565b602082019050919050565b60006020820190508181036000830152620004f481620004b2565b9050919050565b6200050681620003d7565b82525050565b6000819050919050565b62000521816200050c565b82525050565b60006040820190506200053e6000830185620004fb565b6200054d602083018462000516565b9392505050565b60008115159050919050565b6200056b8162000554565b81146200057757600080fd5b50565b6000815190506200058b8162000560565b92915050565b600060208284031215620005aa57620005a9620003b2565b5b6000620005ba848285016200057a565b91505092915050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000620005fb60178362000478565b91506200060882620005c3565b602082019050919050565b600060208201905081810360008301526200062e81620005ec565b9050919050565b60805160a05160c0516114c96200067a600039600081816104da01526105b5015260006107950152600081816107e9015281816108b4015261095901526114c96000f3fe6080604052600436106100595760003560e01c80633aeac4e11461006557806351cff8d91461008e57806379ba5097146100b75780638da5cb5b146100ce578063b9ba2196146100f9578063f2fde38b1461012257610060565b3661006057005b600080fd5b34801561007157600080fd5b5061008c60048036038101906100879190610c9c565b61014b565b005b34801561009a57600080fd5b506100b560048036038101906100b09190610cdc565b610255565b005b3480156100c357600080fd5b506100cc610319565b005b3480156100da57600080fd5b506100e36104ae565b6040516100f09190610d18565b60405180910390f35b34801561010557600080fd5b50610120600480360381019061011b9190610dce565b6104d7565b005b34801561012e57600080fd5b5061014960048036038101906101449190610cdc565b610a39565b005b610153610a4d565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161018e9190610d18565b602060405180830381865afa1580156101ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cf9190610e4a565b90508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b815260040161020c929190610e86565b6020604051808303816000875af115801561022b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024f9190610ee7565b50505050565b61025d610a4d565b600047905060008273ffffffffffffffffffffffffffffffffffffffff168260405161028890610f45565b60006040518083038185875af1925050503d80600081146102c5576040519150601f19603f3d011682016040523d82523d6000602084013e6102ca565b606091505b5050905080610314573383836040517f9d11f56300000000000000000000000000000000000000000000000000000000815260040161030b93929190610f5a565b60405180910390fd5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a090610fee565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b817f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016105319190610d18565b602060405180830381865afa15801561054e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105729190610e4a565b10156105b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105aa9061105a565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b815260040161060e929190610e86565b600060405180830381600087803b15801561062857600080fd5b505af115801561063c573d6000803e3d6000fd5b5050505060006040518060a001604052808560405160200161065e9190610d18565b60405160208183030381529060405281526020013385604051602401610685929190610e86565b6040516020818303038152906040527f40c10f19000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050508152602001600067ffffffffffffffff8111156107225761072161107a565b5b60405190808252806020026020018201604052801561075b57816020015b610748610c09565b8152602001906001900390816107405790505b508152602001600180811115610774576107736110a9565b5b846001811115610787576107866110a9565b5b146107935760006107b5565b7f00000000000000000000000000000000000000000000000000000000000000005b73ffffffffffffffffffffffffffffffffffffffff16815260200160405180602001604052806000815250815250905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166320487ded87846040518363ffffffff1660e01b81526004016108429291906112fe565b602060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108839190610e4a565b9050600060018081111561089a576108996110a9565b5b8460018111156108ad576108ac6110a9565b5b03610957577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166396f4e9f988856040518363ffffffff1660e01b815260040161090d9291906112fe565b6020604051808303816000875af115801561092c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109509190611364565b90506109f9565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166396f4e9f98389866040518463ffffffff1660e01b81526004016109b39291906112fe565b60206040518083038185885af11580156109d1573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906109f69190611364565b90505b7f54791b38f3859327992a1ca0590ad3c0f08feba98d1a4f56ab0dca74d203392a81604051610a2891906113a0565b60405180910390a150505050505050565b610a41610a4d565b610a4a81610add565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610adb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad290611407565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4290611473565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c6982610c3e565b9050919050565b610c7981610c5e565b8114610c8457600080fd5b50565b600081359050610c9681610c70565b92915050565b60008060408385031215610cb357610cb2610c39565b5b6000610cc185828601610c87565b9250506020610cd285828601610c87565b9150509250929050565b600060208284031215610cf257610cf1610c39565b5b6000610d0084828501610c87565b91505092915050565b610d1281610c5e565b82525050565b6000602082019050610d2d6000830184610d09565b92915050565b600067ffffffffffffffff82169050919050565b610d5081610d33565b8114610d5b57600080fd5b50565b600081359050610d6d81610d47565b92915050565b6000819050919050565b610d8681610d73565b8114610d9157600080fd5b50565b600081359050610da381610d7d565b92915050565b60028110610db657600080fd5b50565b600081359050610dc881610da9565b92915050565b60008060008060808587031215610de857610de7610c39565b5b6000610df687828801610d5e565b9450506020610e0787828801610c87565b9350506040610e1887828801610d94565b9250506060610e2987828801610db9565b91505092959194509250565b600081519050610e4481610d7d565b92915050565b600060208284031215610e6057610e5f610c39565b5b6000610e6e84828501610e35565b91505092915050565b610e8081610d73565b82525050565b6000604082019050610e9b6000830185610d09565b610ea86020830184610e77565b9392505050565b60008115159050919050565b610ec481610eaf565b8114610ecf57600080fd5b50565b600081519050610ee181610ebb565b92915050565b600060208284031215610efd57610efc610c39565b5b6000610f0b84828501610ed2565b91505092915050565b600081905092915050565b50565b6000610f2f600083610f14565b9150610f3a82610f1f565b600082019050919050565b6000610f5082610f22565b9150819050919050565b6000606082019050610f6f6000830186610d09565b610f7c6020830185610d09565b610f896040830184610e77565b949350505050565b600082825260208201905092915050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b6000610fd8601683610f91565b9150610fe382610fa2565b602082019050919050565b6000602082019050818103600083015261100781610fcb565b9050919050565b7f496e76616c696420616d6f756e74000000000000000000000000000000000000600082015250565b6000611044600e83610f91565b915061104f8261100e565b602082019050919050565b6000602082019050818103600083015261107381611037565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6110e181610d33565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611121578082015181840152602081019050611106565b60008484015250505050565b6000601f19601f8301169050919050565b6000611149826110e7565b61115381856110f2565b9350611163818560208601611103565b61116c8161112d565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6111ac81610c5e565b82525050565b6111bb81610d73565b82525050565b6040820160008201516111d760008501826111a3565b5060208201516111ea60208501826111b2565b50505050565b60006111fc83836111c1565b60408301905092915050565b6000602082019050919050565b600061122082611177565b61122a8185611182565b935061123583611193565b8060005b8381101561126657815161124d88826111f0565b975061125883611208565b925050600181019050611239565b5085935050505092915050565b600060a0830160008301518482036000860152611290828261113e565b915050602083015184820360208601526112aa828261113e565b915050604083015184820360408601526112c48282611215565b91505060608301516112d960608601826111a3565b50608083015184820360808601526112f1828261113e565b9150508091505092915050565b600060408201905061131360008301856110d8565b81810360208301526113258184611273565b90509392505050565b6000819050919050565b6113418161132e565b811461134c57600080fd5b50565b60008151905061135e81611338565b92915050565b60006020828403121561137a57611379610c39565b5b60006113888482850161134f565b91505092915050565b61139a8161132e565b82525050565b60006020820190506113b56000830184611391565b92915050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006113f1601683610f91565b91506113fc826113bb565b602082019050919050565b60006020820190508181036000830152611420816113e4565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b600061145d601783610f91565b915061146882611427565b602082019050919050565b6000602082019050818103600083015261148c81611450565b905091905056fea2646970667358221220f0d3c5cfa5dd0af0860c6aa57d0a370ff24e67486ee8f6f9326487b66f884c1e64736f6c63430008130033";

type TokenSenderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenSenderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenSender__factory extends ContractFactory {
  constructor(...args: TokenSenderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    router: PromiseOrValue<string>,
    link: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenSender> {
    return super.deploy(
      router,
      link,
      token,
      overrides || {}
    ) as Promise<TokenSender>;
  }
  override getDeployTransaction(
    router: PromiseOrValue<string>,
    link: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(router, link, token, overrides || {});
  }
  override attach(address: string): TokenSender {
    return super.attach(address) as TokenSender;
  }
  override connect(signer: Signer): TokenSender__factory {
    return super.connect(signer) as TokenSender__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenSenderInterface {
    return new utils.Interface(_abi) as TokenSenderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenSender {
    return new Contract(address, _abi, signerOrProvider) as TokenSender;
  }
}
